AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda function to update Managed Node Groups for a given cluster based on a specific interval.
Parameters:

  CLUSTER:
    Type: String
    Default: efs
    Description: The Cluster name to search for Managed Node Groups

  REGION:
    Type: String
    Default: eu-central-1
    Description: The Cluster region

  RATE:
    Description: >
      The rate (frequency) that determines when CloudWatch Events runs the rule that
      triggers the Lambda function.
    Default: rate(10 minutes)
    AllowedValues:
      - rate(10 minutes)
      - rate(1 day)
      - rate(7 days)
      - rate(30 days)
    Type: String

Resources:

  LambdaSchedule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: >
        A schedule for the Lambda function..
      ScheduleExpression: !Ref RATE
      State: ENABLED
      Targets:
        - Arn: !Sub ${UpdateFunction.Arn}
          Id: LambdaSchedule

  LambdaSchedulePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Sub ${UpdateFunction.Arn}
      Principal: 'events.amazonaws.com'
      SourceArn: !Sub ${LambdaSchedule.Arn}

  UpdateFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.8
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler
      Environment:
        Variables:
          cluster: !Ref CLUSTER
          region: !Ref REGION
      Code:
        ZipFile: |
          from __future__ import print_function
          import os
          import boto3

          client = boto3.client('eks')

          def handler(event, context):
              cluster = os.getenv("cluster", None)
              region = os.getenv("region", None)

              if cluster and region:
                  message = "Env vars are there cluster: {} region: {}!".format(cluster, region)
                  # List Node Groups inside cluster
                  response = client.list_nodegroups(
                      clusterName=cluster,
                  )
                  try:
                      for nodegroup in response['nodegroups']:
                          print("Node Group => {}".format(nodegroup))
                          response = client.update_nodegroup_version(
                              clusterName=cluster,
                              nodegroupName=nodegroup,
                          )
                          message = "Update => {}".format(response)
                  except:
                      message = "Something went badly wrong, do you have Managed Node groups in this cluster?"
              else:
                  message = "No env vars passed"

              print(message)
              return message
      Description: The function that perform the API Update call

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: '*'
              Resource: '*'